{"version":3,"sources":["SpatialData/SpatialData.js","App.js","reportWebVitals.js","index.js"],"names":["geoData","props","className","lat","long","alt","acc","altAcc","head","speed","distTexasCap","distStarCafe","distSphinx","App","state","gpsData","updateGPS","distance","lat1","lon1","lat2","lon2","p","c","Math","cos","a","asin","sqrt","toFixed","setState","geoFindMe","status","document","querySelector","mapLink","href","textContent","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","altitude","accuracy","altitudeAccuracy","heading","String","onClick","target","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2b3f34ea.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst geoData = (props) => {\r\n    return (\r\n      <div className=\"spatialInfo\">\r\n        <p>Latitude: {props.lat}</p>\r\n        <p>Longitude: {props.long}</p>\r\n        <p>Altitude: {props.alt} meters (RSL)</p>\r\n        <p>Accuracy: {props.acc} meters</p>\r\n        <p>Altitude Accuracy: {props.altAcc} meters</p>\r\n        <p>Heading: {props.head}</p>\r\n        <p>Speed: {props.speed} m/s</p>\r\n        <p>Distance to Texas Capitol Building: {props.distTexasCap} km</p>\r\n        <p>Distance to Starlight Cafe in Terlingua: {props.distStarCafe} km</p>\r\n        <p>Distance to the Great Sphinx: {props.distSphinx} km</p>\r\n        <p />\r\n        <em>Distances calculated using Haversine formula</em>\r\n        <p />\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default geoData;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport GeoData from './SpatialData/SpatialData';\n\nclass App extends Component {\n  state = {\n    gpsData: {\n      lat: \"\",\n      long: \"\",\n      alt: \"\",\n      acc: \"\",\n      altAcc: \"\",\n      head: \"\",\n      speed: \"\",\n      distTexasCap: \"\",\n      distStarCafe: \"\",\n      distSphinx: \"\"\n    }\n  }\n\n  updateGPS = (lat, long, alt, acc, altAcc, head, speed) => {\n    const distance = (lat1, lon1, lat2, lon2) => {\n      const p = 0.017453292519943295;    // Math.PI / 180\n      const c = Math.cos;\n      const a = 0.5 - c((lat2 - lat1) * p)/2 +\n              c(lat1 * p) * c(lat2 * p) *\n              (1 - c((lon2 - lon1) * p))/2;\n\n      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\n    }\n    const distTexasCap = distance(lat, long, 30.274712, -97.740179).toFixed(2)\n    const distStarCafe = distance(lat, long, 29.321298, -103.616760).toFixed(2)\n    const distSphinx = distance(lat, long, 29.975287, 31.137818).toFixed(2)\n    this.setState( {\n      gpsData: {\n        lat: lat,\n        long: long,\n        alt: alt,\n        acc: acc,\n        altAcc: altAcc,\n        head: head,\n        speed: speed,\n        distTexasCap: distTexasCap,\n        distStarCafe: distStarCafe,\n        distSphinx: distSphinx\n      }\n    } )\n  }\n\n  geoFindMe = () => {\n\n    const status = document.querySelector('.status');\n    const mapLink = document.querySelector('.map-link');\n\n    mapLink.href = '';\n    mapLink.textContent = '';\n\n    const success = (position) => {\n      const latitude  = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      let altitude = position.coords.altitude;\n      if (!altitude) {\n        altitude = \"---\";\n      }\n      const accuracy = position.coords.accuracy;\n      let altitudeAccuracy = position.coords.altitudeAccuracy;\n      if (!altitudeAccuracy) {\n        altitudeAccuracy = \"---\";\n      }\n      let heading = position.coords.heading;\n      if (!heading) {\n        heading = \"---\"\n      } else {\n        heading = String(heading) + \" degrees\";\n      }\n      let speed = position.coords.speed;\n      if (!speed) {\n        speed = \"---\";\n      }\n\n      status.textContent = '';\n      mapLink.href = `https://www.openstreetmap.org/#map=18/${latitude}/${longitude}`;\n      mapLink.textContent = `Latitude: ${latitude} °, Longitude: ${longitude} °`;\n      this.updateGPS(latitude, longitude, altitude, accuracy, altitudeAccuracy,\n        heading, speed);\n    }\n\n    const error = () => {\n      status.textContent = 'Unable to retrieve your location';\n    }\n\n    if(!navigator.geolocation) {\n      status.textContent = 'Geolocation is not supported by your browser';\n    } else {\n      status.textContent = 'Locating…';\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  }\n\n  render() {\n  return (\n    <div className=\"App\">\n      <h1>Geolocation React App</h1>\n      <h2></h2>\n      <button onClick={() => this.geoFindMe()}>Find Me</button>\n      <p className= \"status\"></p>\n      <a className= \"map-link\" target=\"_blank\"></a>\n      <GeoData\n        lat={this.state.gpsData.lat}\n        long={this.state.gpsData.long}\n        alt={this.state.gpsData.alt}\n        acc={this.state.gpsData.acc}\n        altAcc={this.state.gpsData.altAcc}\n        head={this.state.gpsData.head}\n        speed={this.state.gpsData.speed}\n        distTexasCap={this.state.gpsData.distTexasCap}\n        distStarCafe={this.state.gpsData.distStarCafe}\n        distSphinx={this.state.gpsData.distSphinx}\n        />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}